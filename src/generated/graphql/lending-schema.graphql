type ActiveOfferNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  notificationType: String!
  offer: Offer!
  offerId: String!
  readOn: DateTime
  user: User!
}

interface Activity implements Node {
  id: String!
  timestamp: DateTime!
  txHash: Hash
}

scalar Address

type Asset implements Node {
  accessTypeName: String!
  cacheUrl: String
  contentTypeMime: String!
  data: String!
  id: String!
}

type Auction implements Node {
  duration: BigInt
  endTime: DateTime
  highestBid: Bid
  id: String!
  loan: MultiSourceLoan!
  minBid: BigInt!
  originator: Address
  settler: Address
  startTime: DateTime
  status: String!
  triggerFee: BigInt
}

type AuctionBidConfirmationNotification implements Node & Notification {
  auction: Auction!
  auctionId: String!
  bid: Bid!
  bidId: Int!
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  loanId: String!
  notificationType: String!
  readOn: DateTime
  user: User!
}

type AuctionConnection {
  edges: [AuctionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AuctionEdge {
  cursor: String!
  node: Auction!
}

type AuctionEndedNotification implements Node & Notification {
  auction: Auction!
  auctionId: String!
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  loanId: String!
  notificationType: String!
  readOn: DateTime
  user: User!
}

enum AuctionSortField {
  END_TIME
}

input AuctionSortInput {
  field: AuctionSortField!
  order: Ordering!
}

type AuctionStartedNotification implements Node & Notification {
  auction: Auction!
  auctionId: String!
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  loanId: String!
  notificationType: String!
  readOn: DateTime
  user: User!
}

enum AuctionStatus {
  ENDED
  LIVE
  PAST
  UPCOMING
}

type AuctionWonNotification implements Node & Notification {
  auction: Auction!
  auctionId: String!
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  loanId: String!
  notificationType: String!
  readOn: DateTime
  user: User!
}

type Bid implements Node {
  amount: BigInt!
  auction: Auction!
  auctionId: String!
  bidder: Address!
  id: String!
  indexInBlock: Int!
  timestamp: DateTime!
  txHash: Hash!
}

type BidConnection {
  edges: [BidEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BidEdge {
  cursor: String!
  node: Bid!
}

enum BidSortField {
  BID
  HIGHEST_BID
}

input BidSortInput {
  field: BidSortField!
  order: Ordering!
}

scalar BigInt

type Collection implements Node {
  bannerImage: Asset
  collectionUrl: String
  contractData: ContractData!
  description: String
  discordUrl: String
  externalUrl: String
  id: String!
  image: Asset
  imageId: String
  maxNetPrincipalOffer(currencyAddress: Address!): CollectionOffer
  name: String
  nftsCount: Int
  slug: String!
  statistics: CollectionStatistics!
  twitterUsername: String
  verified: Boolean!
  wrappedCollection: Collection
  wrappedCollectionId: Int
  wrapperCollections: [Collection!]!
}

type CollectionConnection {
  edges: [CollectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CollectionEdge {
  cursor: String!
  node: Collection!
}

type CollectionEventsCountByDayAndCurrency {
  auctions: BigInt!
  buyouts: BigInt!
  defaults: BigInt!
  foreclosings: BigInt!
  originations: BigInt!
  refinancings: BigInt!
  renegotiations: BigInt!
  repayments: BigInt!
  topUps: BigInt!
}

type CollectionLoansData {
  maxAprBps: Float!
  maxPrincipalAmount: BigInt!
  maxRemainingTime: BigInt!
  minAprBps: Float!
  minPrincipalAmount: BigInt!
  minRemainingTime: BigInt!
}

type CollectionOffer implements Node & Offer {
  aprBps: BigInt!
  availablePrincipalAmount: BigInt!
  borrowerAddress: Address
  capacity: BigInt!
  collection: Collection!
  consumedCapacity: BigInt!
  contractAddress: Address!
  createdDate: DateTime
  currency: Currency!
  duration: BigInt!
  expirationTime: BigInt!
  fee: BigInt!
  hidden: Boolean
  id: String!
  lenderAddress: Address
  lenderAvailableBalance: BigInt
  maxPrincipal: BigInt!
  maxSeniorRepayment: BigInt!

  """Deprecated field: use maxSeniorRepayment instead."""
  maxTrancheFloor: BigInt! @deprecated(reason: "Use maxSeniorRepayment instead.")
  netPrincipal: BigInt!
  offerHash: Hash
  offerId: BigInt!
  principalAddress: Address!
  principalAmount: BigInt!
  repayment: BigInt!
  requiresLiquidation: Boolean
  signature: Signature
  signerAddress: Address
  statistics: CollectionOfferStatistics!
  status: String!
  validators: [OfferValidator!]!
}

input CollectionOfferInput {
  aprBps: BigInt!
  borrowerAddress: Address!
  capacity: BigInt!
  collectionId: Int!
  contractAddress: Address!
  duration: BigInt!
  expirationTime: BigInt!
  fee: BigInt!
  lenderAddress: Address!
  maxSeniorRepayment: BigInt = null
  maxTrancheFloor: BigInt = null
  offerValidators: [OfferValidatorInput!]!
  principalAddress: Address!
  principalAmount: BigInt!
  requiresLiquidation: Boolean = null
  signerAddress: Address = null
}

type CollectionOfferStatistics {
  acceptedLoans: Int!
  consumedCapacity: BigInt!
}

type CollectionOrder implements Activity & Node & Order {
  collection: Collection!
  createdDate: DateTime!
  currency: Currency!
  currencyAddress: Address!
  expiration: DateTime
  fees: BigInt!
  hidden: Boolean!
  id: String!
  isAsk: Boolean!
  isPrivate: Boolean!
  maker: Address!
  marketPlace: String!
  netAmount: BigInt!
  nonce: BigInt!
  orderType: String!
  price: BigInt!
  signature: Signature!
  startTime: DateTime!
  status: String!
  taker: Address!
  timestamp: DateTime!
  txHash: Hash
}

input CollectionSignedOfferInput {
  aprBps: BigInt!
  borrowerAddress: Address!
  capacity: BigInt!
  collectionId: Int!
  contractAddress: Address!
  duration: BigInt!
  expirationTime: BigInt!
  fee: BigInt!
  lenderAddress: Address!
  maxSeniorRepayment: BigInt = null
  maxTrancheFloor: BigInt = null
  offerHash: Hash!
  offerId: BigInt!
  offerValidators: [OfferValidatorInput!]!
  principalAddress: Address!
  principalAmount: BigInt!
  requiresLiquidation: Boolean = null
  signature: Signature!
  signerAddress: Address = null
}

enum CollectionSortField {
  LISTING_COUNT
  LOAN_COUNT
  OFFER_COUNT
  OUTSTANDING_PRINCIPAL
  TOTAL_LOAN_VOLUME
  TOTAL_OUTSTANDING_PRINCIPAL
  TOTAL_VOLUME
  TRENDING_VOLUME
}

input CollectionSortInput {
  field: CollectionSortField!
  order: Ordering!
  principalAddress: Address = null
}

type CollectionStatistics {
  bestOffer: CurrencyAmount
  floorPrice: CurrencyAmount
  floorPrice7d: Float
  floorPrice30d: Float
  nftsCount: Float
  numberOfOffers(currencyAddress: Address!): Float!
  numberOfPricedNfts: Int!
  outstandingLoanCount: Int!
  outstandingNftsCount: BigInt!
  outstandingPrincipal(currencyAddress: Address!): BigInt!
  percentageInOutstandingLoans: Float!
  repaymentRate: Float!
  totalLoanVolume(currencyAddress: Address!): BigInt!
  totalLoanVolume1d(currencyAddress: Address!): BigInt!
  totalLoanVolume1m(currencyAddress: Address!): BigInt!
  totalLoanVolume1w(currencyAddress: Address!): BigInt!
  totalLoanVolume1y(currencyAddress: Address!): BigInt!
  totalLoanVolume2m(currencyAddress: Address!): BigInt!
  totalLoanVolume3m(currencyAddress: Address!): BigInt!
  totalLoanVolume4m(currencyAddress: Address!): BigInt!
  totalOutstandingPrincipal: BigInt!
  totalVolume: Float
  totalVolume1d: Float
  totalVolume1m: Float
  totalVolume1w: Float
  totalVolume1y: Float
  totalVolume2m: Float
  totalVolume3m: Float
  totalVolume4m: Float
}

type ContractData implements Node {
  blockchain: String!
  contractAddress: Address!
  createdDate: DateTime!
  creatorAddress: Address
  id: String!
  standard: String!
}

type Currency implements Node {
  address: Address!
  currentEthRate: Float
  currentUsdcPrice: Float
  decimals: Int!
  id: String!
  symbol: String!
}

type CurrencyAmount {
  amount: Float!
  currency: Currency!
}

"""Date with time (isoformat)"""
scalar DateTime

type Delegation implements Node {
  contractAddress: String!
  delegateTo: Address!
  id: String!
  nft: NFT!
  timestamp: DateTime!
}

type DelegationConnection {
  edges: [DelegationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type DelegationEdge {
  cursor: String!
  node: Delegation!
}

type ERC4626Deposit implements Node & PoolActivity {
  assets: BigInt!
  caller: Address!
  id: String!
  indexInBlock: Int!
  owner: Address!
  pool: Pool!
  poolAddress: Address!
  shares: BigInt!
  timestamp: DateTime!
  txHash: Hash!
}

type ERC4626Withdraw implements Node & PoolActivity {
  assets: BigInt!
  caller: Address!
  id: String!
  indexInBlock: Int!
  owner: Address!
  pool: Pool!
  poolAddress: Address!
  receiver: Address!
  shares: BigInt!
  timestamp: DateTime!
  txHash: Hash!
}

scalar Hash

scalar Hex

input Interval {
  max: Float = null
  min: Float = null
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type LinkedWallets implements Node {
  id: String!
  pending: Boolean!
  shouldAccept: Boolean!
  walletAddress: String!
}

type Listing implements Node {
  createdDate: DateTime!
  desiredDuration: Int
  desiredPrincipalAddress: Address
  expirationDate: DateTime!
  id: String!
  marketplaceName: MarketplaceEnum!
  nft: NFT!
  user: User!
}

type ListingConnection {
  edges: [ListingEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ListingEdge {
  cursor: String!
  node: Listing!
}

interface Loan implements Node {
  activities: [LoanActivity!]!
  address: Address!
  borrowerAddress: Address!
  contractStartTime: DateTime!
  currency: Currency!
  duration: BigInt!
  id: String!
  indexInBlock: Int!
  loanId: Int!

  """Deprecated field. Use offerIds to return loan offer ids instead."""
  offer: Offer! @deprecated(reason: "Use offerIds to return loan offer ids instead.")
  offerIds: [String!]!
  principalAddress: Address!
  protocolFee: BigInt!
  repaidActivity: LoanRepaid
  repaymentTime: DateTime
  startTime: DateTime!
  status: String!
  timestamp: DateTime!
  txHash: Hash!
}

type LoanActivitiesStatisticsByMonth {
  count: [Int!]!
  outstanding: [BigInt!]!
}

interface LoanActivity implements LoanEvent & Node {
  activityType: String!
  eventType: String!
  id: String!
  indexInBlock: Int!
  loan: Loan!
  loanId: String!
  multiSourceLoanHistory: MultiSourceLoanHistory!
  nextActivity: LoanActivity
  prevActivity: LoanActivity
  timestamp: DateTime!
  txHash: Hash!
}

type LoanActivityConnection {
  edges: [LoanActivityEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type LoanActivityEdge {
  cursor: String!
  node: LoanActivity!
}

enum LoanActivitySortField {
  TIMESTAMP
}

input LoanActivitySortInput {
  field: LoanActivitySortField!
  order: Ordering!
}

enum LoanActivityType {
  LOAN_AUCTIONED
  LOAN_EXTENDED
  LOAN_FORECLOSED
  LOAN_INITIATED
  LOAN_REFINANCED
  LOAN_REFINANCED_FROM_OFFERS
  LOAN_REPAID
  LOAN_SENT_TO_AUCTION
}

type LoanAuctioned implements LoanActivity & LoanEvent & Node {
  activityType: String!
  eventType: String!
  id: String!
  indexInBlock: Int!
  loan: Loan!
  loanId: String!
  loanPayments: [LoanPayment!]!
  multiSourceLoanHistory: MultiSourceLoanHistory!
  nextActivity: LoanActivity
  prevActivity: LoanActivity
  timestamp: DateTime!
  totalAuctioned: BigInt!
  txHash: Hash!
  withBuyout: Boolean!
}

type LoanAuctionedNotification implements Node & Notification {
  auction: Auction!
  auctionId: String!
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  loanId: String!
  notificationType: String!
  readOn: DateTime
  user: User!
}

type LoanDefaultReminderNotification implements Node & Notification {
  createdOn: DateTime!
  defaultsInHours: Int!
  id: String!
  loan: MultiSourceLoan!
  loanId: String!
  notificationType: String!
  readOn: DateTime
  user: User!
}

type LoanDefaulted implements LoanEvent & Node {
  eventType: String!
  id: String!
  loan: Loan!
  loanId: String!
  timestamp: DateTime!
}

type LoanDefaultedNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  loanId: String!
  notificationType: String!
  readOn: DateTime
  user: User!
}

interface LoanEvent implements Node {
  eventType: String!
  id: String!
  loan: Loan!
  loanId: String!
  timestamp: DateTime!
}

type LoanEventConnection {
  edges: [LoanEventEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type LoanEventEdge {
  cursor: String!
  node: LoanEvent!
}

enum LoanEventSortField {
  TIMESTAMP
}

input LoanEventSortInput {
  field: LoanEventSortField!
  order: Ordering!
}

enum LoanEventType {
  LOAN_AUCTIONED
  LOAN_BOUGHT_OUT
  LOAN_DEFAULTED
  LOAN_EXTENDED
  LOAN_FORECLOSED
  LOAN_INITIATED
  LOAN_REFINANCED
  LOAN_RENEGOTIATED
  LOAN_REPAID
  LOAN_SENT_TO_AUCTION
  LOAN_TOPED_UP
}

type LoanExtended implements LoanActivity & LoanEvent & Node {
  activityType: String!
  eventType: String!
  id: String!
  indexInBlock: Int!
  loan: Loan!
  loanId: String!
  multiSourceLoanHistory: MultiSourceLoanHistory!
  nextActivity: LoanActivity
  prevActivity: LoanActivity
  timestamp: DateTime!
  txHash: Hash!
}

type LoanExtendedNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  newHistory: MultiSourceLoanHistory!
  newHistoryId: String!
  notificationType: String!
  previousHistory: MultiSourceLoanHistory!
  previousHistoryId: String!
  readOn: DateTime
  user: User!
}

type LoanForeclosed implements LoanActivity & LoanEvent & Node {
  activityType: String!
  eventType: String!
  id: String!
  indexInBlock: Int!
  loan: Loan!
  loanId: String!
  multiSourceLoanHistory: MultiSourceLoanHistory!
  nextActivity: LoanActivity
  prevActivity: LoanActivity
  timestamp: DateTime!
  txHash: Hash!
}

type LoanInitiated implements LoanActivity & LoanEvent & Node {
  activityType: String!
  eventType: String!
  id: String!
  indexInBlock: Int!
  loan: Loan!
  loanId: String!
  multiSourceLoanHistory: MultiSourceLoanHistory!
  nextActivity: LoanActivity
  prevActivity: LoanActivity
  timestamp: DateTime!
  txHash: Hash!
}

type LoanPayment implements Node {
  accruedInterest: BigInt!
  activityId: String!
  destination: Address!
  id: String!
  pendingInterest: BigInt!
  principalAddress: Address!
  principalAmount: BigInt!
  protocolFee: BigInt!
  source: Address!
}

type LoanRefinanced implements LoanActivity & LoanEvent & Node {
  activityType: String!
  addedNewTranche: Boolean!
  eventType: String!
  id: String!
  indexInBlock: Int!
  isRenegotiation: Boolean!
  loan: Loan!
  loanId: String!
  multiSourceLoanHistory: MultiSourceLoanHistory!
  nextActivity: LoanActivity
  prevActivity: LoanActivity
  timestamp: DateTime!
  txHash: Hash!
}

type LoanRefinancedFromOffers implements LoanActivity & LoanEvent & Node {
  activityType: String!
  eventType: String!
  id: String!
  indexInBlock: Int!
  loan: Loan!
  loanId: String!
  multiSourceLoanHistory: MultiSourceLoanHistory!
  nextActivity: LoanActivity
  prevActivity: LoanActivity
  timestamp: DateTime!
  txHash: Hash!
}

type LoanRefinancedNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  newHistory: MultiSourceLoanHistory!
  newHistoryId: String!
  notificationType: String!
  previousHistory: MultiSourceLoanHistory!
  previousHistoryId: String!
  readOn: DateTime
  user: User!
}

type LoanRepaid implements LoanActivity & LoanEvent & Node {
  activityType: String!
  eventType: String!
  id: String!
  indexInBlock: Int!
  loan: Loan!
  loanId: String!
  multiSourceLoanHistory: MultiSourceLoanHistory!
  nextActivity: LoanActivity
  prevActivity: LoanActivity
  timestamp: DateTime!
  totalInterest: BigInt!
  txHash: Hash!
}

type LoanRepaidNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  loanId: String!
  notificationType: String!
  readOn: DateTime
  user: User!
}

type LoanSentToAuction implements LoanActivity & LoanEvent & Node {
  activityType: String!
  eventType: String!
  id: String!
  indexInBlock: Int!
  liquidatorAddress: String!
  loan: Loan!
  loanId: String!
  multiSourceLoanHistory: MultiSourceLoanHistory!
  nextActivity: LoanActivity
  prevActivity: LoanActivity
  timestamp: DateTime!
  txHash: Hash!
}

enum LoanSortField {
  APR_BPS
  DURATION
  EFFECTIVE_APR_BPS
  END_DATE
  EXPECTED_INTEREST
  EXPIRATION_DATE
  ORIGINATION_FEE
  PAID_INTEREST
  PRINCIPAL_AMOUNT
  RENEGOTIATION_REQUESTED
  START_TIME
  TOTAL_INTEREST
}

input LoanSortInput {
  field: LoanSortField!
  order: Ordering!
}

enum LoanStatusType {
  LOAN_AUCTIONED
  LOAN_AUCTIONED_WITH_BUYOUT
  LOAN_DEFAULTED
  LOAN_FORECLOSED
  LOAN_INITIATED
  LOAN_REPAID
  LOAN_SENT_TO_AUCTION
}

type LoansData {
  maxAprBps: Float!
  maxPrincipalAmount: BigInt!
  maxRemainingTime: BigInt!
  minAprBps: Float!
  minPrincipalAmount: BigInt!
  minRemainingTime: BigInt!
}

type LostSource implements Node {
  accruedInterest: BigInt!
  activityId: String!
  aprBps: BigInt!
  duration: BigInt!
  earnedInterest: BigInt!
  endDate: DateTime!
  expectedInterestLeft: BigInt!
  id: String!
  lenderAddress: String!
  lenderEaprBps: BigInt!
  loan: MultiSourceLoan!
  originationFee: BigInt!
  principalAmount: BigInt!
  profit: BigInt!
  repaidInterest: BigInt!
  startTime: DateTime!
}

type LostSourceNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  lostSource: LostSource!
  lostSourceId: String!
  notificationType: String!
  readOn: DateTime
  user: User!
}

enum MarketplaceEnum {
  GONDI
  NFTFI
}

type MultiSourceLoan implements Loan & Node {
  activities: [LoanActivity!]!
  address: Address!
  auction: Auction
  blendedAprBps: Float!
  borrowerAddress: Address!
  contractStartTime: DateTime!
  currency: Currency!
  duration: BigInt!
  durationFromRenegotiationOrStart: BigInt!
  endDate: DateTime!
  id: String!
  indexInBlock: Int!
  lastRenegotiationDate: DateTime
  loanId: Int!
  nft: NFT!

  """Deprecated field. Use offerIds to return loan offer ids instead."""
  offer: Offer! @deprecated(reason: "Use offerIds to return loan offer ids instead.")
  offerIds: [String!]!
  principalAddress: Address!
  principalAmount: BigInt!
  protocolFee: BigInt!
  renegotiationCount: Int!
  renegotiationRequest: RenegotiationRequest
  repaidActivity: LoanRepaid
  repaymentTime: DateTime
  sources: [Source!]!
  startTime: DateTime!
  status: String!
  timestamp: DateTime!
  topUpRequest: TopUpRequest
  totalOriginationFee: BigInt!
  txHash: Hash!
}

type MultiSourceLoanConnection {
  edges: [MultiSourceLoanEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MultiSourceLoanEdge {
  cursor: String!
  node: MultiSourceLoan!
}

type MultiSourceLoanHistory implements Node {
  activity: LoanActivity!
  activityId: String!
  borrowerAddress: String!
  currency: Currency!
  duration: BigInt!
  id: String!
  loanId: Int!
  nft: NFT!
  offerIds: [String!]!
  principalAddress: Address!
  principalAmount: BigInt!
  sources: [SourceHistory!]!
  startTime: DateTime!
}

type Mutation {
  addListingsOfNftsFromUser(desiredDuration: Int = null, desiredPrincipalAddress: Address = null, excludeCollections: [String!] = null, onlyCollections: [String!] = null, searchTerm: String = null): Void
  addOrUpdateListing(desiredDuration: Int = null, desiredPrincipalAddress: Address = null, nftId: Int!): Listing!
  addOrUpdateRenegotiationRequest(desiredAprBps: BigInt = null, desiredDuration: BigInt = null, desiredPrincipalAmount: BigInt = null, loanId: String!): RenegotiationRequest!
  addOrUpdateTopUpRequest(desiredAprBps: BigInt = null, desiredTopUp: BigInt = null, loanId: String!): TopUpRequest!
  generateCollectionOfferToBeSigned(offerInput: CollectionOfferInput!): CollectionOffer!
  generateRenegotiationOfferToBeSigned(renegotiationInput: RenegotiationOfferInput!): Renegotiation!
  generateSingleNftOfferToBeSigned(offerInput: SingleNFTOfferInput!): SingleNFTOffer!
  hideAllOffers(contractAddress: Address!, minOfferId: String!): [Offer!]!
  hideOffer(contractAddress: Address!, offerId: String!): Offer!
  hideOrder(orderId: Int!): Order!
  hideRenegotiation(contractAddress: Address = "0xcf7ed3acca5a467e9e704c703e8d87f634fb0fc9", renegotiationId: String!): Renegotiation!
  markNotificationIdsAsRead(ids: [Int!]): Void
  markNotificationsAsRead: Void
  publishSellAndRepayOrder(orderInput: NFTOrderInput!): SellAndRepayOrderSignatureRequest!
  removeListing(nftId: Int!): Listing!
  removeListingsOfNftsFromUser(excludeCollections: [String!] = null, onlyCollections: [String!] = null, searchTerm: String = null): Void
  removeRenegotiationRequest(loanId: String!): RenegotiationRequest!
  removeTopUpRequest(loanId: String!): TopUpRequest!
  saveRenegotiationSignedOffer(fallbackOfferInput: SingleNFTSignedOfferInput = null, signedRenegotiationInput: SignedRenegotiationOfferInput!): Renegotiation!
  saveSignedCollectionOffer(signedOfferInput: CollectionSignedOfferInput!): CollectionOffer!
  saveSignedSingleNftOffer(signedOfferInput: SingleNFTSignedOfferInput!): SingleNFTOffer!
  setReferral(referrerId: Int!): Void
  showOffer(contractAddress: Address!, offerId: String!): Offer!
  showOrder(orderId: Int!): Order!
  showRenegotiation(contractAddress: Address = "0xcf7ed3acca5a467e9e704c703e8d87f634fb0fc9", renegotiationId: String!): Renegotiation!
}

type NFT implements Node {
  activeLoan: Loan
  collection: Collection
  collectionId: Int
  createdDate: DateTime!
  description: String
  id: String!
  image: Asset
  isFlagged: Boolean
  listed: Listing
  marketPlaceOfPrice: String
  name: String
  nftId: String!
  owner: Address
  price: BigInt
  priceCurrencyAddress: String
  rarityRank: Int
  rarityScore: Float
  statistics: NftStatistics!
  tokenId: BigInt!
  traits: [Trait!]!
  url: String
  wrappedCount: [Int!]!
  wrapsNfts: [NFT!]
}

type NFTConnection {
  edges: [NFTEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NFTEdge {
  cursor: String!
  node: NFT!
}

input NFTOrderInput {
  amount: BigInt!
  contractAddress: Address!
  currencyAddress: Address!
  expirationTime: BigInt!
  isAsk: Boolean!
  repaymentSignature: Signature = null
  replaceOrderId: Int = null
  signature: Signature = null
  startTime: BigInt!
  taker: Address = null
  tokenId: BigInt!
}

type NewCollectionUnlistedOfferNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  notificationType: String!
  readOn: DateTime
  user: User!
}

type NewOfferNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  notificationType: String!
  offer: Offer!
  offerId: String!
  readOn: DateTime
  user: User!
}

type NewRenegotiationOfferNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  loanId: String!
  notificationType: String!
  readOn: DateTime
  renegotiation: Renegotiation!
  renegotiationId: String!
  user: User!
}

enum NftSortField {
  COLLECTION
  NAME
  OFFERS_COUNT
  STATUS
}

input NftSortInput {
  field: NftSortField!
  order: Ordering!
  principalAddress: Address = null
}

type NftStatistics {
  lastSale: Sale
  loansTotalVolume(currencyAddress: Address!): BigInt!
  numberOfOffers(currencyAddress: Address!): Float!
  topTraitFloorPrice: CurrencyAmount
}

interface Node {
  id: String!
}

interface Notification implements Node {
  createdOn: DateTime!
  id: String!
  notificationType: String!
  readOn: DateTime
  user: User!
}

type NotificationConnection {
  edges: [NotificationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NotificationEdge {
  cursor: String!
  node: Notification!
}

enum NotificationType {
  AUCTION_WON_NOTIFICATION
  LOAN_DEFAULTED_NOTIFICATION
  LOAN_DEFAULT_REMINDER_NOTIFICATION
  LOAN_REPAID_NOTIFICATION
  LOST_SOURCE_NOTIFICATION
  NEW_OFFER_NOTIFICATION
  NEW_RENEGOTIATION_OFFER_NOTIFICATION
  OFFER_ACCEPTED_NOTIFICATION
  OUTBID_NOTIFICATION
  SET_NFT_NOTIFICATION
}

interface Offer implements Node {
  aprBps: BigInt!
  availablePrincipalAmount: BigInt!
  borrowerAddress: Address
  capacity: BigInt!
  consumedCapacity: BigInt!
  contractAddress: Address!
  createdDate: DateTime
  currency: Currency!
  duration: BigInt!
  expirationTime: BigInt!
  fee: BigInt!
  hidden: Boolean
  id: String!
  lenderAddress: Address
  lenderAvailableBalance: BigInt
  maxPrincipal: BigInt!
  maxSeniorRepayment: BigInt!

  """Deprecated field: use maxSeniorRepayment instead."""
  maxTrancheFloor: BigInt! @deprecated(reason: "Use maxSeniorRepayment instead.")
  netPrincipal: BigInt!
  offerHash: Hash
  offerId: BigInt!
  principalAddress: Address!
  principalAmount: BigInt!
  repayment: BigInt!
  requiresLiquidation: Boolean
  signature: Signature
  signerAddress: Address
  status: String!
  validators: [OfferValidator!]!
}

type OfferAcceptedNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  loanId: String!
  notificationType: String!
  offer: Offer!
  offerId: String!
  readOn: DateTime
  user: User!
}

type OfferConnection {
  edges: [OfferEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type OfferEdge {
  cursor: String!
  node: Offer!
}

type OfferStatistics {
  consumedCapacity: BigInt!
}

enum OfferStatus {
  ACTIVE
  CANCELLED
  EXECUTED
  EXPIRED
  INACTIVE
  OUTPERFORMED
}

type OfferValidator implements Node {
  arguments: Hex!
  id: String!
  offerId: String!
  validator: Address!
}

input OfferValidatorInput {
  arguments: Hex!
  validator: Address!
}

enum OffersSortField {
  APR_BPS
  AVAILABLE_PRINCIPAL_AMOUNT
  CREATED_DATE
  DAILY_INTEREST
  DURATION
  EFFECTIVE_APR_BPS
  EXPIRATION
  FEE
  MAX_PRINCIPAL
  NET_INTEREST
  NET_PRINCIPAL
  PRINCIPAL_AMOUNT
  REPAYMENT
  STATUS
  TOTAL_INTEREST
}

input OffersSortInput {
  durationOfInterest: Int = null
  field: OffersSortField!
  order: Ordering!
  principalOfInterest: BigInt = null
}

interface Order implements Activity & Node {
  createdDate: DateTime!
  currency: Currency!
  currencyAddress: Address!
  expiration: DateTime
  fees: BigInt!
  hidden: Boolean!
  id: String!
  isAsk: Boolean!
  isPrivate: Boolean!
  maker: Address!
  marketPlace: String!
  netAmount: BigInt!
  nonce: BigInt!
  orderType: String!
  price: BigInt!
  signature: Signature!
  startTime: DateTime!
  status: String!
  taker: Address!
  timestamp: DateTime!
  txHash: Hash
}

type OrderConnection {
  edges: [OrderEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type OrderEdge {
  cursor: String!
  node: Order!
}

enum OrderSortField {
  EXPIRATION
}

input OrderSortInput {
  field: OrderSortField!
  order: Ordering!
}

enum OrderStatusType {
  Active
  Cancelled
  Executed
  Expired
  Inactive
  Outperformed
}

enum Ordering {
  ASC
  DESC
}

type OutbidNotification implements Node & Notification {
  auction: Auction!
  auctionId: String!
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  loanId: String!
  newBid: Bid!
  newBidId: Int!
  notificationType: String!
  readOn: DateTime
  user: User!
  userBid: Bid!
  userBidId: Int!
}

type OutstandingLoanStatistics {
  loansData(currencyAddress: Address): LoansData!
  outstandingLoanCount: Int!
  outstandingNftsCount: BigInt!
  outstandingPrincipal(currencyAddress: Address!): BigInt!
  totalOutstandingPrincipal: BigInt!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PointActivity implements Node {
  id: String!
  loanActivity: LoanActivity!
  points: BigInt!
  reason: String!
  timestamp: DateTime!
  userId: Int!
}

type PointActivityConnection {
  edges: [PointActivityEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PointActivityEdge {
  cursor: String!
  node: PointActivity!
}

type Pool implements Node {
  address: Address!
  asset: Currency!
  baseRateAllocator: PoolBaseRateAllocator!
  collectionFactors: [PoolCollectionFactors!]!
  currency: Currency!
  description: String!
  id: String!
  poolActivities: [PoolActivity!]!
  statistics: PoolStatistics!
}

interface PoolActivity implements Node {
  id: String!
  indexInBlock: Int!
  pool: Pool!
  poolAddress: Address!
  timestamp: DateTime!
  txHash: Hash!
}

type PoolActivityConnection {
  edges: [PoolActivityEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PoolActivityEdge {
  cursor: String!
  node: PoolActivity!
}

enum PoolActivityType {
  ERC4626_DEPOSIT
  ERC4626_WITHDRAW
  POOL_APR_FACTOR_SET
  POOL_APR_PREMIUM_SET
  POOL_BASE_INTEREST_ALLOCATOR_SET
  POOL_COLLECTION_FACTORS_SET
  POOL_REALLOCATED
  QUEUE_DEPLOYED
  WITHDRAWAL_POSITION_LOCKED
  WITHDRAWAL_POSITION_MINTED
  WITHDRAWN_FROM_QUEUE
}

type PoolAprFactorSet implements Node & PoolActivity {
  id: String!
  indexInBlock: Int!
  pool: Pool!
  poolAddress: Address!
  timestamp: DateTime!
  txHash: Hash!
}

type PoolAprPremiumSet implements Node & PoolActivity {
  aprPremium: BigInt!
  id: String!
  indexInBlock: Int!
  pool: Pool!
  poolAddress: Address!
  timestamp: DateTime!
  txHash: Hash!
}

type PoolBaseInterestAllocatorSet implements Node & PoolActivity {
  id: String!
  indexInBlock: Int!
  pool: Pool!
  poolAddress: Address!
  timestamp: DateTime!
  txHash: Hash!
}

type PoolBaseRateAllocator implements Node {
  address: Address!
  currency: Currency!
  description: String!
  id: String!
  stakeCurrency: Currency!
}

type PoolCollectionFactors implements Node {
  collection: Collection!
  collectionId: Int!
  duration: BigInt!
  id: String!
  offerId: String!
  pool: Pool!
  poolAddress: String!
  principalCurrentFactor: BigInt!
  principalHistoricalFactor: BigInt!
}

type PoolCollectionFactorsSet implements Node & PoolActivity {
  id: String!
  indexInBlock: Int!
  pool: Pool!
  poolAddress: Address!
  timestamp: DateTime!
  txHash: Hash!
}

type PoolConnection {
  edges: [PoolEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PoolEdge {
  cursor: String!
  node: Pool!
}

type PoolReallocated implements Node & PoolActivity {
  id: String!
  indexInBlock: Int!
  pool: Pool!
  poolAddress: Address!
  timestamp: DateTime!
  txHash: Hash!
}

type PoolStatistics {
  activeLoansCount: Int!
  activeOffersCount: Int!
  balanceAllocatedBaseRate: BigInt!
  liquid: BigInt!
  outstandingApr: Float!
  outstandingPrincipal: BigInt!
  realizedApr: Float!
  totalDeposits: BigInt!
  totalLoanVolume: BigInt!
}

type Query {
  getCollectionActivitiesCount(collectionId: Int!, currencyAddress: Address, fromTimestamp: Int!): CollectionEventsCountByDayAndCurrency!
  getCollectionBySlug(slug: String!): Collection
  getCollectionLoansData(collectionId: Int!, currencyAddress: Address): CollectionLoansData!
  getCollectionsByContractAddress(contractAddress: Address!): [Collection!]!
  getListingById(listingId: Int!): Listing
  getLoanActivitiesStatisticsByMonth(activities: [LoanActivityType!]!, currencyAddress: Address!, lenders: [Address!]!): LoanActivitiesStatisticsByMonth!
  getLoanById(address: String!, loanId: Int!): Loan
  getNftByContractAddressAndTokenId(contractAddress: Address!, tokenId: BigInt!): NFT
  getNftBySlugAndTokenId(slug: String!, tokenId: BigInt!): NFT
  getOutstandingLoanStatistics: OutstandingLoanStatistics!
  getPointsFromReferrals: Int!
  getPoolByShareSymbol(symbol: String!): Pool
  getReferredWallets: Int!
  getSourcesStatistics(currencyAddress: Address!, lenders: [Address!]!, statuses: [LoanStatusType!]!): SourcesStatistics!
  getSourcesStatisticsByCollection(currencyAddress: Address!, lenders: [Address!]!, statuses: [LoanStatusType!]!): [SourceStatisticsFromCollection!]!
  getUserPointActivities(after: String, first: Int = 10): PointActivityConnection!
  getUserPoints: Int!
  listAuctions(after: String, currencyAddress: Address = null, first: Int = 10, sortBy: [AuctionSortInput!] = null, statuses: [AuctionStatus!] = null): AuctionConnection!
  listBids(after: String, auctionId: String = null, bidders: [String!] = null, currencyAddress: Address = null, first: Int = 10, onlyLatest: Boolean! = false, sortBy: [BidSortInput!] = null): BidConnection!
  listCollections(after: String, collections: [Int!] = null, excludeGondiUserVault: Boolean = false, first: Int = 10, searchTerm: String = null, sortBy: [CollectionSortInput!] = null, standards: [TokenStandardType!] = null, withListings: Boolean = false, withLoans: Boolean = false): CollectionConnection!
  listCollectionsWithListings(after: String, collections: [Int!] = null, first: Int! = 10, searchTerm: String = null): CollectionConnection!
  listCollectionsWithLoans(after: String, collections: [Int!] = null, first: Int! = 10, searchTerm: String = null): CollectionConnection!
  listListings(after: String, collectionIds: [Int!] = null, currencyAddress: Address = null, first: Int = 10, marketplaceNames: [MarketplaceEnum!] = null, searchTerm: String = null, userFilter: UserFilter = null, withLoans: Boolean = false): ListingConnection!
  listListingsForSale(after: String, collectionId: Int = null, currencyAddress: Address = null, first: Int = null, forTaker: Address = null, hidden: Boolean = null, maker: Address = null, nftId: Int = null, sortBy: [OrderSortInput!] = null, statuses: [OrderStatusType!] = null): OrderConnection!

  """Deprecated."""
  listLoanActivities(after: String, collections: [Int!] = null, currencyAddress: Address = null, first: Int! = 10, fromTimestamp: Int = null, loanId: String = null, sortBy: [LoanActivitySortInput!] = null, types: [LoanActivityType!] = null): LoanActivityConnection! @deprecated(reason: "Use list_loan_events instead.")
  listLoanEvents(after: String, collections: [Int!] = null, currencyAddress: Address = null, first: Int! = 10, fromTimestamp: Int = null, loanId: String = null, sortBy: [LoanEventSortInput!] = null, types: [LoanEventType!] = null): LoanEventConnection!
  listLoans(after: String, borrowers: [String!] = null, collections: [Int!] = null, contractAddresses: [Address!] = null, currencyAddress: Address = null, excludeAddresses: [Address!] = null, first: Int! = 10, hideEndLocked: Boolean = null, hideLocked: Boolean = null, nfts: [Int!] = null, orderByStatuses: Boolean = true, sortBy: [LoanSortInput!] = null, statuses: [LoanStatusType!] = null, terms: TermsFilter = null, withRenegRequestOnly: Boolean! = false, withTopUpRequestOnly: Boolean! = false): MultiSourceLoanConnection!
  listNftDelegations(after: String, contractAddress: Address = null, first: Int! = 20, nftId: Int!): DelegationConnection!
  listNftOffersAndRenegotiations(
    after: String
    collections: [Int!] = null

    """Offer only filter."""
    contractAddress: Address = null
    currencyAddress: Address = null
    first: Int = null
    hidden: Boolean = null

    """Renegotiation only filter."""
    isAddNewTranche: Boolean = null
    lenders: [String!] = null

    """Renegotiation only filter."""
    loanId: String = null

    """Offer only filter."""
    nfts: [Int!] = null
    onlyCollectionOffers: Boolean! = false
    onlyInvalid: Boolean! = false
    onlySingleNftOffers: Boolean! = true
    sortBy: OffersSortInput = null
    statuses: [OfferStatus!] = null
    terms: TermsFilter = null
  ): SingleNFTOfferCollectionOfferRenegotiationConnection!
  listNftsFromCollections(after: String, collections: [Int!]!, first: Int = 10, onlyListed: Boolean = null, searchTerm: String = null, traitRanges: [TraitRangeOptionsInput!] = null, traits: [TraitKeyValueOptionsInput!] = null): NFTConnection!
  listNftsFromUser(after: String, collectionAddresses: [Address!] = null, first: Int = 10, includeInStash: Boolean! = false, searchTerm: String = null, sortBy: [NftSortInput!] = null, standards: [TokenStandardType!] = null, withLoans: Boolean = false, withNoWraps: Boolean = false): NFTConnection!
  listNotifications(after: String, first: Int = 50, notificationTypes: [NotificationType!] = null, onlyRead: Boolean! = false, onlyUnread: Boolean! = false): NotificationConnection!
  listOffers(after: String, borrowerAddress: String = null, collections: [Int!] = null, contractAddress: Address = null, currencyAddress: Address = null, first: Int = 10, hidden: Boolean = null, lenders: [String!] = null, nfts: [Int!] = null, onlyCollectionOffers: Boolean = false, onlySingleNftOffers: Boolean = false, sortBy: [OffersSortInput!] = null, statuses: [OfferStatus!] = null, terms: TermsFilter = null, worseOffers: Boolean = true): OfferConnection!
  listPoolActivities(after: String, first: Int! = 20, ownerAddresses: [Address!] = null, poolAddresses: [Address!] = null, types: [PoolActivityType!] = null): PoolActivityConnection!
  listPools(addresses: [String!] = null, after: String, first: Int! = 10): PoolConnection!
  listRenegotiations(after: String, collections: [Int!] = null, first: Int = 10, hidden: Boolean = null, isAddNewTranche: Boolean = null, loanId: String = null, sortBy: [OffersSortInput!] = null, statuses: [OfferStatus!] = null, terms: RefinanceTermsFilter = null): RenegotiationConnection!
  listSources(after: String, collections: [Int!] = null, contractAddresses: [Address!] = null, currencyAddress: Address = null, excludeAddresses: [Address!] = null, first: Int! = 10, hideEndLocked: Boolean = null, hideLocked: Boolean = null, includeLost: Boolean = null, lenders: [String!] = null, loanPrincipal: Interval = null, sortBy: [SourceSortInput!] = null, statuses: [LoanStatusType!] = null, terms: TermsFilter = null, withdrawalQueues: [Int!] = null): SourceLostSourceConnection!
  listWithdrawalPositions(after: String, first: Int! = 10, owner: Address = null, poolAddresses: [Address!] = null): WithdrawalPositionConnection!
  listWithdrawalQueues(after: String, first: Int! = 10, poolAddresses: [Address!] = null): WithdrawalQueueConnection!
  me: User
}

type QueueDeployed implements Node & PoolActivity {
  id: String!
  index: Int!
  indexInBlock: Int!
  pool: Pool!
  poolAddress: Address!
  queueAddress: Address!
  timestamp: DateTime!
  txHash: Hash!
}

input RangeInput {
  max: Int!
  min: Int!
}

input RefinanceTermsFilter {
  aprBps: Interval = null
  duration: Interval = null
  fee: Interval = null
  maxPrincipal: Interval = null
  netPrincipal: Interval = null
  principal: Interval = null
  remainingTime: Interval = null
}

type Renegotiation implements Node {
  aprBps: BigInt!
  availablePrincipalAmount: BigInt!
  createdDate: DateTime
  duration: BigInt!
  expirationTime: BigInt!
  feeAmount: BigInt!
  hidden: Boolean
  id: String!
  isAddNewTranche: Boolean!
  lenderAddress: Address
  loan: Loan!
  loanAddress: Address!
  loanId: BigInt!
  loanReferenceId: String!
  nft: NFT!
  offerHash: Hash
  principalAmount: BigInt!
  renegotiationId: BigInt!
  repayment: BigInt!
  requiresLiquidation: Boolean!
  signature: Signature
  signerAddress: Address
  status: String!
  strictImprovement: Boolean!
}

type RenegotiationConnection {
  edges: [RenegotiationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type RenegotiationEdge {
  cursor: String!
  node: Renegotiation!
}

input RenegotiationOfferInput {
  aprBps: BigInt!
  duration: BigInt!
  expirationTime: BigInt!
  feeAmount: BigInt!
  isAddNewTranche: Boolean = null
  lenderAddress: Address!
  loanId: String!
  principalAmount: BigInt!
  requiresLiquidation: Boolean = null
  signerAddress: Address = null
  strictImprovement: Boolean = null
  targetPrincipal: [BigInt!] = null
  trancheIndex: [BigInt!] = null
}

type RenegotiationRequest implements Node {
  createdDate: DateTime!
  desiredAprBps: BigInt
  desiredDuration: BigInt
  desiredPrincipalAmount: BigInt
  expirationDate: DateTime!
  id: String!
  loanId: String!
}

type RenegotiationRequestedNotification implements Node & Notification {
  aprBps: BigInt
  createdOn: DateTime!
  duration: BigInt
  id: String!
  loan: MultiSourceLoan!
  loanId: String!
  notificationType: String!
  principalAmount: BigInt
  readOn: DateTime
  user: User!
}

type Sale implements Activity & Node {
  id: String!
  nft: NFT!
  order: Order!
  orderId: String!
  taker: String!
  timestamp: DateTime!
  txHash: Hash
}

type SellAndRepayOrder implements Activity & Node & Order {
  cancelCalldata: Hex!
  createdDate: DateTime!
  currency: Currency!
  currencyAddress: Address!
  expiration: DateTime
  fees: BigInt!
  hidden: Boolean!
  id: String!
  isAsk: Boolean!
  isPrivate: Boolean!
  loan: MultiSourceLoan!
  loanId: String!
  maker: Address!
  marketPlace: String!
  marketPlaceAddress: Address!
  netAmount: BigInt!
  nft: NFT!
  nftId: Int!
  nonce: BigInt!
  orderType: String!
  price: BigInt!
  repaymentCalldata: Hex!
  signature: Signature!
  startTime: DateTime!
  status: String!
  taker: Address!
  timestamp: DateTime!
  txHash: Hash
}

union SellAndRepayOrderSignatureRequest = SellAndRepayOrder | SignatureRequest

scalar Signature

type SignatureRequest {
  key: String!
  typedData: TypedData!
}

input SignedRenegotiationOfferInput {
  aprBps: BigInt!
  duration: BigInt!
  expirationTime: BigInt!
  feeAmount: BigInt!
  isAddNewTranche: Boolean = null
  lenderAddress: Address!
  loanId: String!
  offerHash: Hash!
  principalAmount: BigInt!
  renegotiationId: BigInt!
  requiresLiquidation: Boolean = null
  signature: Signature!
  signerAddress: Address = null
  strictImprovement: Boolean = null
  targetPrincipal: [BigInt!] = null
  trancheIndex: [BigInt!] = null
}

type SingleNFTOffer implements Node & Offer {
  aprBps: BigInt!
  availablePrincipalAmount: BigInt!
  borrowerAddress: Address
  capacity: BigInt!
  consumedCapacity: BigInt!
  contractAddress: Address!
  createdDate: DateTime
  currency: Currency!
  duration: BigInt!
  expirationTime: BigInt!
  fee: BigInt!
  hidden: Boolean
  id: String!
  lenderAddress: Address
  lenderAvailableBalance: BigInt
  maxPrincipal: BigInt!
  maxSeniorRepayment: BigInt!

  """Deprecated field: use maxSeniorRepayment instead."""
  maxTrancheFloor: BigInt! @deprecated(reason: "Use maxSeniorRepayment instead.")
  netPrincipal: BigInt!
  nft: NFT!
  offerHash: Hash
  offerId: BigInt!
  principalAddress: Address!
  principalAmount: BigInt!
  repayment: BigInt!
  requiresLiquidation: Boolean
  signature: Signature
  signerAddress: Address
  statistics: OfferStatistics!
  status: String!
  validators: [OfferValidator!]!
}

union SingleNFTOfferCollectionOfferRenegotiation = CollectionOffer | Renegotiation | SingleNFTOffer

type SingleNFTOfferCollectionOfferRenegotiationConnection {
  edges: [SingleNFTOfferCollectionOfferRenegotiationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SingleNFTOfferCollectionOfferRenegotiationEdge {
  cursor: String!
  node: SingleNFTOfferCollectionOfferRenegotiation!
}

input SingleNFTOfferInput {
  aprBps: BigInt!
  borrowerAddress: Address!
  capacity: BigInt!
  contractAddress: Address!
  duration: BigInt!
  expirationTime: BigInt!
  fee: BigInt!
  lenderAddress: Address!
  maxSeniorRepayment: BigInt = null
  maxTrancheFloor: BigInt = null
  nftId: Int!
  offerValidators: [OfferValidatorInput!]!
  principalAddress: Address!
  principalAmount: BigInt!
  requiresLiquidation: Boolean = null
  signerAddress: Address = null
}

type SingleNFTOrder implements Activity & Node & Order {
  createdDate: DateTime!
  currency: Currency!
  currencyAddress: Address!
  expiration: DateTime
  fees: BigInt!
  hidden: Boolean!
  id: String!
  isAsk: Boolean!
  isPrivate: Boolean!
  maker: Address!
  marketPlace: String!
  netAmount: BigInt!
  nft: NFT!
  nftId: Int!
  nonce: BigInt!
  orderType: String!
  price: BigInt!
  signature: Signature!
  startTime: DateTime!
  status: String!
  taker: Address!
  timestamp: DateTime!
  txHash: Hash
}

input SingleNFTSignedOfferInput {
  aprBps: BigInt!
  borrowerAddress: Address!
  capacity: BigInt!
  contractAddress: Address!
  duration: BigInt!
  expirationTime: BigInt!
  fee: BigInt!
  lenderAddress: Address!
  maxSeniorRepayment: BigInt = null
  maxTrancheFloor: BigInt = null
  nftId: Int!
  offerHash: Hash!
  offerId: BigInt!
  offerValidators: [OfferValidatorInput!]!
  principalAddress: Address!
  principalAmount: BigInt!
  requiresLiquidation: Boolean = null
  signature: Signature!
  signerAddress: Address = null
}

type Source implements Node {
  accruedInterest: BigInt!
  aprBps: BigInt!
  borrowerEaprBps: BigInt!
  earnedInterest: BigInt!
  effectiveDuration: BigInt!
  endDate: DateTime!
  expectedInterestLeft: BigInt!
  id: String!
  lenderAddress: String!
  lenderEaprBps: BigInt!
  loan: MultiSourceLoan!
  loanId: String!
  loanIndex: Int
  loanReferenceId: String!
  originationFee: BigInt!
  principalAmount: BigInt!
  profit: BigInt!
  refinanceNetAprBps: BigInt!
  repaidInterest: BigInt!
  seniorPrincipalAmount: BigInt
  startTime: DateTime!
}

type SourceHistory implements Node {
  accruedInterest: BigInt!
  aprBps: BigInt!
  id: String!
  lenderAddress: String!
  loanId: String!
  loanIndex: Int
  originationFee: BigInt!
  principalAmount: BigInt!
  seniorPrincipalAmount: BigInt
  startTime: DateTime!
}

union SourceLostSource = LostSource | Source

type SourceLostSourceConnection {
  edges: [SourceLostSourceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SourceLostSourceEdge {
  cursor: String!
  node: SourceLostSource!
}

enum SourceSortField {
  ACCRUED_INTEREST
  APR_BPS
  DUE_DATE
  DURATION
  EARNED_INTEREST
  END_DATE
  ORIGINATION_FEE
  PRINCIPAL_AMOUNT
  REFINANCE_NET_APR_BPS
  REPAID_INTEREST
  START_TIME
}

input SourceSortInput {
  field: SourceSortField!
  order: Ordering!
}

type SourceStatisticsFromCollection {
  collection: Collection!
  collectionId: String!
  stats: SourcesStatistics!
}

type SourcesStatistics {
  count: Int!
  earnedInterest: BigInt!
  expectedInterestLeft: BigInt!
  originationFee: BigInt!
  outstanding: BigInt!
  principal: BigInt!
  profit: BigInt!
  repaidInterest: BigInt!
  wavgAprBps: BigInt!
  wavgLenderEaprBps: BigInt!
}

type StatByCollection {
  collection: Collection!
  value: BigInt!
}

input TermsFilter {
  aprBps: Interval = null
  duration: Interval = null
  fee: Interval = null
  maxPrincipal: Interval = null
  netPrincipal: Interval = null
  principal: Interval = null
  remainingTime: Interval = null
}

enum TokenStandardType {
  ERC721
  ERC1155
  OLD_ERC721
}

type TopUpRequest implements Node {
  createdDate: DateTime!
  desiredAprBps: BigInt
  desiredTopUp: BigInt
  expirationDate: DateTime!
  id: String!
  loanId: String!
}

type TopUpRequestedNotification implements Node & Notification {
  aprBps: BigInt!
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  loanId: String!
  notificationType: String!
  readOn: DateTime
  topUp: BigInt!
  user: User!
}

type Trait {
  collectionId: String!
  statistics: CollectionStatistics!
  type: String!
  value: String!
}

input TraitKeyValueOptionsInput {
  key: String!
  values: [String!]!
}

input TraitRangeOptionsInput {
  key: String!
  range: RangeInput!
}

type TypedData {
  domain: JSON!
  message: JSON!
  primaryType: String!
  types: JSON!
}

type UnderfundedOfferNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  notificationType: String!
  offer: Offer!
  offerId: String!
  readOn: DateTime
  user: User!
}

type User implements Node {
  about: String
  beta: Boolean!
  blockchain: String!
  createdDate: DateTime!
  id: String!
  linkedWallets: [LinkedWallets!]!
  mail: String
  mailValidationDate: DateTime
  originalProfilePicture: String
  profilePictureId: Int
  size64ProfilePicture: String
  size128ProfilePicture: String
  size256ProfilePicture: String
  size512ProfilePicture: String
  statistics: UserStatistics!
  twitterHandle: String
  updatedAt: DateTime
  usedProduct: Boolean!
  username: String
  walletAddress: Address!
}

input UserFilter {
  onlyOrExclude: Boolean!
  userId: Int!
}

type UserStatistics {
  """Deprecated field. Stat will be removed"""
  defaultedPrincipal(currencyAddress: Address!, walletsAddresses: [Address!]!): BigInt! @deprecated(reason: "Stat will be removed")

  """Deprecated field. Use get_sources_statistics_by_collection instead."""
  interestEarnedByCollection(currencyAddress: Address!, walletsAddresses: [Address!]!): [StatByCollection!]! @deprecated(reason: "Use get_sources_statistics_by_collection instead.")

  """Deprecated field. Use get_sources_statistics to get source stats."""
  loanCount(currencyAddress: Address!, walletsAddresses: [Address!]!): BigInt! @deprecated(reason: "Use get_sources_statistics to get source stats.")

  """Deprecated field. Use get_sources_statistics_by_collection instead."""
  loanCountByCollection(currencyAddress: Address!, walletsAddresses: [Address!]!): [StatByCollection!]! @deprecated(reason: "Use get_sources_statistics_by_collection instead.")

  """Deprecated field. Use get_sources_statistics_by_collection instead."""
  loanPrincipalByCollection(currencyAddress: Address!, walletsAddresses: [Address!]!): [StatByCollection!]! @deprecated(reason: "Use get_sources_statistics_by_collection instead.")

  """Deprecated field. Use get_loan_activities_statistics_by_month instead."""
  originationCountAndPrincipalByMonth(currencyAddress: Address!, walletsAddresses: [Address!]!): [[BigInt!]!]! @deprecated(reason: "Use get_loan_activities_statistics_by_month instead.")

  """Deprecated field. Use get_sources_statistics to get source stats."""
  outstandingAccruedInterest(currencyAddress: Address!, walletsAddresses: [Address!]!): BigInt! @deprecated(reason: "Use get_sources_statistics to get source stats.")

  """Deprecated field. Use get_sources_statistics to get source stats."""
  outstandingPrincipal(currencyAddress: Address!, walletsAddresses: [Address!]!): BigInt! @deprecated(reason: "Use get_sources_statistics to get source stats.")

  """Deprecated field. Use get_sources_statistics to get source stats."""
  realizedProfits(currencyAddress: Address!, walletsAddresses: [Address!]!): BigInt! @deprecated(reason: "Use get_sources_statistics to get source stats.")

  """Deprecated field. Use get_loan_activities_statistics_by_month instead."""
  renegotiationCountAndPrincipalByMonth(currencyAddress: Address!, walletsAddresses: [Address!]!): [[BigInt!]!]! @deprecated(reason: "Use get_loan_activities_statistics_by_month instead.")

  """Deprecated field. Use get_sources_statistics to get source stats."""
  totalLentPrincipal(currencyAddress: Address!, walletsAddresses: [Address!]!): BigInt! @deprecated(reason: "Use get_sources_statistics to get source stats.")

  """Deprecated field. Use get_sources_statistics to get source stats."""
  totalLoanCount(currencyAddress: Address!, walletsAddresses: [Address!]!): BigInt! @deprecated(reason: "Use get_sources_statistics to get source stats.")

  """Deprecated field. Use get_sources_statistics to get source stats."""
  wavgOutstandingApr(currencyAddress: Address!, walletsAddresses: [Address!]!): BigInt! @deprecated(reason: "Use get_sources_statistics to get source stats.")

  """Deprecated field. Use get_sources_statistics_by_collection instead."""
  wavgOutstandingAprByCollection(currencyAddress: Address!, walletsAddresses: [Address!]!): [StatByCollection!]! @deprecated(reason: "Use get_sources_statistics_by_collection instead.")

  """Deprecated field. Use get_sources_statistics to get source stats."""
  wavgRepaidApr(currencyAddress: Address!, walletsAddresses: [Address!]!): BigInt! @deprecated(reason: "Use get_sources_statistics to get source stats.")

  """Deprecated field. Use get_sources_statistics_by_collection instead."""
  wavgRepaidAprByCollection(currencyAddress: Address!, walletsAddresses: [Address!]!): [StatByCollection!]! @deprecated(reason: "Use get_sources_statistics_by_collection instead.")
}

"""Represents NULL values"""
scalar Void

type WithdrawalPosition implements Node {
  available: BigInt!
  id: String!
  nft: NFT!
  nftId: Int!
  pending: BigInt!
  requested: BigInt!
  shares: BigInt!
  unlockTime: DateTime
  withdrawalQueue: WithdrawalQueue!
  withdrawalQueueId: Int!
  withdrawn: BigInt!
}

type WithdrawalPositionConnection {
  edges: [WithdrawalPositionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type WithdrawalPositionEdge {
  cursor: String!
  node: WithdrawalPosition!
}

type WithdrawalPositionLocked implements Node & PoolActivity {
  contract: Address!
  id: String!
  indexInBlock: Int!
  pool: Pool!
  poolAddress: Address!
  timestamp: DateTime!
  txHash: Hash!
  unlockTime: DateTime!
}

type WithdrawalPositionMinted implements Node & PoolActivity {
  contract: Address!
  id: String!
  indexInBlock: Int!
  pool: Pool!
  poolAddress: Address!
  receiver: Address!
  shares: BigInt!
  timestamp: DateTime!
  txHash: Hash!
}

type WithdrawalQueue implements Node {
  balance: BigInt!
  collection: Collection!
  collectionId: Int!
  id: String!
  index: Int!
  pending: BigInt!
  pool: Pool!
  poolAddress: Address!
  requested: BigInt!
  requesters: Int!
  startTime: DateTime!
  status: String!
  totalShares: BigInt!
  totalWithdrawn: BigInt!
}

type WithdrawalQueueConnection {
  edges: [WithdrawalQueueEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type WithdrawalQueueEdge {
  cursor: String!
  node: WithdrawalQueue!
}

type WithdrawnFromQueue implements Node & PoolActivity {
  available: BigInt!
  contract: Address!
  id: String!
  indexInBlock: Int!
  pool: Pool!
  poolAddress: Address!
  receiver: Address!
  timestamp: DateTime!
  txHash: Hash!
}