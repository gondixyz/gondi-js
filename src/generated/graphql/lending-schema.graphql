type ActiveOfferNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  notificationType: String!
  offer: Offer!
  readOn: DateTime
  user: User!
}

interface Activity implements Node {
  id: String!
  timestamp: DateTime!
  txHash: Hash
}

scalar Address

type Asset {
  accessTypeName: String!
  cacheUrl: String
  contentTypeMime: String!
  data: String!
}

type Auction implements Node {
  duration: BigInt
  endTime: DateTime
  highestBid: Bid
  id: String!
  loan: MultiSourceLoan!
  originator: Address
  settler: Address
  startTime: DateTime
  status: String!
  triggerFee: BigInt
}

type AuctionBidConfirmationNotification implements Node & Notification {
  auction: Auction!
  bid: Bid!
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  notificationType: String!
  readOn: DateTime
  user: User!
}

type AuctionConnection {
  edges: [AuctionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type AuctionEdge {
  cursor: String!
  node: Auction!
}

type AuctionEndedNotification implements Node & Notification {
  auction: Auction!
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  notificationType: String!
  readOn: DateTime
  user: User!
}

enum AuctionSortField {
  END_TIME
  STATUS
}

input AuctionSortInput {
  field: AuctionSortField!
  order: Ordering!
}

type AuctionStartedNotification implements Node & Notification {
  auction: Auction!
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  notificationType: String!
  readOn: DateTime
  user: User!
}

enum AuctionStatus {
  ENDED
  LIVE
  PAST
  UPCOMING
}

type AuctionWonNotification implements Node & Notification {
  auction: Auction!
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  notificationType: String!
  readOn: DateTime
  user: User!
}

type Bid implements Node {
  amount: BigInt!
  auction: Auction!
  bidder: Address!
  id: String!
  indexInBlock: Int!
  timestamp: DateTime!
  txHash: Hash!
}

type BidConnection {
  edges: [BidEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type BidEdge {
  cursor: String!
  node: Bid!
}

enum BidSortField {
  BID
  HIGHEST_BID
}

input BidSortInput {
  field: BidSortField!
  order: Ordering!
}

scalar BigInt

type Cart implements Node {
  createdDate: DateTime!
  id: String!
  items(after: String, first: Int! = 10): NFTConnection!
}

type Collection implements Node {
  bannerImage: Asset
  collectionUrl: String
  contractData: ContractData
  description: String
  discordUrl: String
  externalUrl: String
  id: String!
  image: Asset
  name: String
  nftsCount: Int
  royalties: [Royalty!]!
  slug: String
  statistics: CollectionStatistics!
  twitterUsername: String
  verified: Boolean!
}

type CollectionConnection {
  edges: [CollectionEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type CollectionEdge {
  cursor: String!
  node: Collection!
}

type CollectionOffer implements Node & Offer {
  aprBps: BigInt!
  borrowerAddress: Address
  capacity: BigInt!
  collection: Collection!
  consumedCapacity: BigInt!
  contractAddress: Address!
  createdDate: DateTime
  currency: Currency
  duration: BigInt!
  expirationTime: BigInt!
  fee: BigInt!
  hidden: Boolean
  id: String!
  lenderAddress: Address
  maxPrincipal: BigInt!
  maxTrancheFloor: BigInt!
  netPrincipal: BigInt!
  offerHash: Hash
  offerId: BigInt!
  principalAddress: Address!
  principalAmount: BigInt!
  repayment: BigInt!
  requiresLiquidation: Boolean
  signature: Signature
  signerAddress: Address
  statistics: CollectionOfferStatistics!
  status: String!
  validators: [OfferValidator!]!
}

input CollectionOfferInput {
  aprBps: BigInt!
  borrowerAddress: Address!
  capacity: BigInt!
  collectionId: Int!
  contractAddress: Address!
  duration: BigInt!
  expirationTime: BigInt!
  fee: BigInt!
  lenderAddress: Address!
  maxTrancheFloor: BigInt = null
  offerValidators: [OfferValidatorInput!]!
  principalAddress: Address!
  principalAmount: BigInt!
  requiresLiquidation: Boolean = null
  signerAddress: Address = null
}

type CollectionOfferStatistics {
  acceptedLoans: Int!
  consumedCapacity: BigInt!
}

type CollectionOrder implements Activity & Node & Order {
  collection: Collection!
  createdDate: DateTime!
  currency: Currency!
  currencyAddress: Address!
  expiration: DateTime
  fees: BigInt!
  hidden: Boolean!
  id: String!
  isAsk: Boolean!
  maker: Address!
  marketPlace: String!
  netAmount: BigInt!
  nonce: BigInt!
  orderType: String!
  price: BigInt!
  signature: Hash!
  startTime: DateTime!
  status: String!
  timestamp: DateTime!
  txHash: Hash
}

input CollectionSignedOfferInput {
  aprBps: BigInt!
  borrowerAddress: Address!
  capacity: BigInt!
  collectionId: Int!
  contractAddress: Address!
  duration: BigInt!
  expirationTime: BigInt!
  fee: BigInt!
  lenderAddress: Address!
  maxTrancheFloor: BigInt = null
  offerHash: Hash!
  offerId: BigInt!
  offerValidators: [OfferValidatorInput!]!
  principalAddress: Address!
  principalAmount: BigInt!
  requiresLiquidation: Boolean = null
  signature: Signature!
  signerAddress: Address = null
}

enum CollectionSortField {
  TOTAL_VOLUME
}

input CollectionSortInput {
  field: CollectionSortField!
  order: Ordering!
}

type CollectionStatistics {
  bestOffer: CurrencyAmount
  floorPrice: CurrencyAmount
  floorPrice7d: Float
  floorPrice30d: Float
  lastSale: Sale
  nftsCount: Float
  numberOfOffers(currencyAddress: Address!): Float!
  numberOfPricedNfts: Int!
  percentageInOutstandingLoans: Float!
  repaymentRate: Float!
  totalLoanVolume(currencyAddress: Address!): BigInt!
  totalLoanVolume1d(currencyAddress: Address!): BigInt!
  totalLoanVolume1m(currencyAddress: Address!): BigInt!
  totalLoanVolume1w(currencyAddress: Address!): BigInt!
  totalLoanVolume1y(currencyAddress: Address!): BigInt!
  totalLoanVolume2m(currencyAddress: Address!): BigInt!
  totalLoanVolume3m(currencyAddress: Address!): BigInt!
  totalLoanVolume4m(currencyAddress: Address!): BigInt!
  totalVolume: Float
  totalVolume1d: Float
  totalVolume1m: Float
  totalVolume1w: Float
  totalVolume1y: Float
  totalVolume2m: Float
  totalVolume3m: Float
  totalVolume4m: Float
}

input ConsiderationInput {
  endAmount: BigInt!
  identifierOrCriteria: BigInt!
  itemType: Int!
  recipient: Address!
  startAmount: BigInt!
  token: Address!
}

type ContractData implements Node {
  blockchain: String!
  contractAddress: Address!
  createdDate: DateTime!
  creatorAddress: Address
  id: String!
}

type Currency implements Node {
  address: Address!
  decimals: Int!
  id: String!
  symbol: String!
}

type CurrencyAmount {
  amount: Float!
  currency: Currency!
}

"""Date with time (isoformat)"""
scalar DateTime

type Delegation implements Node {
  contractAddress: String!
  delegateTo: Address!
  id: String!
  nft: NFT!
  timestamp: DateTime!
}

type DelegationConnection {
  edges: [DelegationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type DelegationEdge {
  cursor: String!
  node: Delegation!
}

scalar Hash

scalar Hex

input Interval {
  max: Float = null
  min: Float = null
}

type LinkedWallets implements Node {
  id: String!
  pending: Boolean!
  shouldAccept: Boolean!
  walletAddress: String!
}

type Listing implements Node {
  createdDate: DateTime!
  desiredDuration: Int
  desiredPrincipalAddress: Address
  id: String!
  marketplaceName: MarketplaceEnum!
  nft: NFT!
  user: User!
}

type ListingConnection {
  edges: [ListingEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type ListingEdge {
  cursor: String!
  node: Listing!
}

interface Loan implements Node {
  activities: [LoanActivity!]!
  address: Address!
  borrowerAddress: Address!
  currency: Currency
  duration: BigInt!
  id: String!
  indexInBlock: Int!
  loanId: Int!

  """Deprecated field. Use offerIds to return loan offer ids instead."""
  offer: Offer! @deprecated(reason: "Use offerIds to return loan offer ids instead.")
  offerIds: [String!]!
  principalAddress: Address!
  repaidActivity: LoanRepaid
  startTime: DateTime!
  status: String!
  timestamp: DateTime!
  txHash: Hash!
}

interface LoanActivity implements Node {
  id: String!
  indexInBlock: Int!
  loan: Loan!
  loanId: String!
  multiSourceLoanHistory: MultiSourceLoanHistory
  timestamp: DateTime!
  txHash: Hash!
}

type LoanActivityConnection {
  edges: [LoanActivityEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type LoanActivityEdge {
  cursor: String!
  node: LoanActivity!
}

enum LoanActivitySortField {
  TIMESTAMP
}

input LoanActivitySortInput {
  field: LoanActivitySortField!
  order: Ordering!
}

enum LoanActivityType {
  LOAN_AUCTIONED
  LOAN_EXTENDED
  LOAN_FORECLOSED
  LOAN_INITIATED
  LOAN_REFINANCED
  LOAN_REPAID
  LOAN_SENT_TO_AUCTION
}

type LoanAuctioned implements LoanActivity & Node {
  id: String!
  indexInBlock: Int!
  loan: Loan!
  loanId: String!
  loanPayments: [LoanPayment!]!
  multiSourceLoanHistory: MultiSourceLoanHistory
  timestamp: DateTime!
  totalAuctioned: BigInt!
  txHash: Hash!
}

type LoanAuctionedNotification implements Node & Notification {
  auction: Auction!
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  notificationType: String!
  readOn: DateTime
  user: User!
}

type LoanDefaultReminderNotification implements Node & Notification {
  createdOn: DateTime!
  defaultsInHours: Int!
  id: String!
  loan: MultiSourceLoan!
  notificationType: String!
  readOn: DateTime
  user: User!
}

type LoanDefaultedNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  notificationType: String!
  readOn: DateTime
  user: User!
}

type LoanExtended implements LoanActivity & Node {
  id: String!
  indexInBlock: Int!
  loan: Loan!
  loanId: String!
  multiSourceLoanHistory: MultiSourceLoanHistory
  timestamp: DateTime!
  txHash: Hash!
}

type LoanExtendedNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  newHistory: MultiSourceLoanHistory!
  notificationType: String!
  previousHistory: MultiSourceLoanHistory!
  readOn: DateTime
  user: User!
}

type LoanForeclosed implements LoanActivity & Node {
  id: String!
  indexInBlock: Int!
  loan: Loan!
  loanId: String!
  multiSourceLoanHistory: MultiSourceLoanHistory
  timestamp: DateTime!
  txHash: Hash!
}

type LoanInitiated implements LoanActivity & Node {
  id: String!
  indexInBlock: Int!
  loan: Loan!
  loanId: String!
  multiSourceLoanHistory: MultiSourceLoanHistory
  timestamp: DateTime!
  txHash: Hash!
}

type LoanPayment implements Node {
  accruedInterest: BigInt!
  activityId: String!
  destination: Address!
  id: String!
  pendingInterest: BigInt!
  principalAddress: Address!
  principalAmount: BigInt!
  protocolFee: BigInt!
  source: Address!
}

type LoanRefinanced implements LoanActivity & Node {
  addedNewTranche: Boolean!
  id: String!
  indexInBlock: Int!
  isRenegotiation: Boolean!
  loan: Loan!
  loanId: String!
  multiSourceLoanHistory: MultiSourceLoanHistory
  timestamp: DateTime!
  txHash: Hash!
}

type LoanRefinancedNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  newHistory: MultiSourceLoanHistory!
  notificationType: String!
  previousHistory: MultiSourceLoanHistory!
  readOn: DateTime
  user: User!
}

type LoanRepaid implements LoanActivity & Node {
  id: String!
  indexInBlock: Int!
  loan: Loan!
  loanId: String!
  multiSourceLoanHistory: MultiSourceLoanHistory
  timestamp: DateTime!
  totalInterest: BigInt!
  txHash: Hash!
}

type LoanRepaidNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  notificationType: String!
  readOn: DateTime
  user: User!
}

type LoanSentToAuction implements LoanActivity & Node {
  id: String!
  indexInBlock: Int!
  liquidatorAddress: Address!
  loan: Loan!
  loanId: String!
  multiSourceLoanHistory: MultiSourceLoanHistory
  timestamp: DateTime!
  txHash: Hash!
}

enum LoanSortField {
  APR_BPS
  DURATION
  EXPECTED_INTEREST
  EXPIRATION_DATE
  ORIGINATION_FEE
  PAID_INTEREST
  PRINCIPAL_AMOUNT
  RENEGOTIATION_REQUESTED
  START_TIME
  TOTAL_INTEREST
}

input LoanSortInput {
  field: LoanSortField!
  order: Ordering!
}

enum LoanStatusType {
  LOAN_AUCTIONED
  LOAN_DEFAULTED
  LOAN_FORECLOSED
  LOAN_INITIATED
  LOAN_REPAID
  LOAN_SENT_TO_AUCTION
}

type LostSource implements Node {
  accruedInterest: BigInt!
  aprBps: BigInt!
  duration: BigInt!
  id: String!
  lenderAddress: String!
  loan: MultiSourceLoan!
  originationFee: BigInt!
  principalAmount: BigInt!
  startTime: DateTime!
}

type LostSourceNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  lostSource: LostSource!
  notificationType: String!
  readOn: DateTime
  user: User!
}

enum MarketplaceEnum {
  GONDI
  NFTFI
}

type MultiSourceLoan implements Loan & Node {
  activities: [LoanActivity!]!
  address: Address!
  auction: Auction
  blendedAprBps: Float!
  borrowerAddress: Address!
  currency: Currency
  duration: BigInt!
  id: String!
  indexInBlock: Int!
  loanId: Int!
  nft: NFT!

  """Deprecated field. Use offerIds to return loan offer ids instead."""
  offer: Offer! @deprecated(reason: "Use offerIds to return loan offer ids instead.")
  offerIds: [String!]!
  principalAddress: Address!
  principalAmount: BigInt!
  renegotiationRequest: RenegotiationRequest
  repaidActivity: LoanRepaid
  sources: [Source!]!
  startTime: DateTime!
  status: String!
  timestamp: DateTime!
  totalOriginationFee: BigInt!
  txHash: Hash!
}

type MultiSourceLoanConnection {
  edges: [MultiSourceLoanEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type MultiSourceLoanEdge {
  cursor: String!
  node: MultiSourceLoan!
}

type MultiSourceLoanHistory implements Node {
  activity: LoanActivity!
  borrowerAddress: String!
  duration: BigInt!
  id: String!
  offerIds: [String!]!
  principalAddress: String!
  principalAmount: BigInt!
  sources: [SourceHistory!]!
  startTime: DateTime!
}

type Mutation {
  addListingsOfNftsFromUser(desiredDuration: Int = null, desiredPrincipalAddress: Address = null): Void
  addOrUpdateListing(desiredDuration: Int = null, desiredPrincipalAddress: Address = null, nftId: Int!): Listing!
  addOrUpdateRenegotiationRequest(desiredAprBps: BigInt!, desiredDuration: BigInt!, desiredPrincipalAmount: BigInt!, loanId: String!): RenegotiationRequest!
  generateCollectionOfferToBeSigned(offerInput: CollectionOfferInput!): CollectionOffer!
  generateRenegotiationOfferToBeSigned(renegotiationInput: RenegotiationOfferInput!): Renegotiation!
  generateSingleNftOfferToBeSigned(offerInput: SingleNFTOfferInput!): SingleNFTOffer!
  hideAllOffers(contractAddress: Address!, minOfferId: String!): [Offer!]!
  hideOffer(contractAddress: Address!, offerId: String!): Offer!
  hideRenegotiation(contractAddress: Address = "0xCa5a494Ca20483e21ec1E41FE1D9461Da77595Bd", renegotiationId: String!): Renegotiation!
  hideSaleOffer(saleOfferId: String!): SingleNFTOrder!
  markNotificationIdsAsRead(ids: [Int!]): Void
  markNotificationsAsRead: Void
  removeListing(nftId: Int!): Listing!
  removeListingsOfNftsFromUser: Void
  removeRenegotiationRequest(loanId: String!): RenegotiationRequest!
  saveRenegotiationSignedOffer(signedRenegotiationInput: SignedRenegotiationOfferInput!): Renegotiation!
  saveSignedCollectionOffer(signedOfferInput: CollectionSignedOfferInput!): CollectionOffer!
  saveSignedSaleOffer(signedOfferInput: SignedOrderInput!): SingleNFTOrder!
  saveSignedSingleNftOffer(signedOfferInput: SingleNFTSignedOfferInput!): SingleNFTOffer!
  setReferral(referrerId: Int!): Void
  showOffer(contractAddress: Address!, offerId: String!): Offer!
  showRenegotiation(contractAddress: Address = "0xCa5a494Ca20483e21ec1E41FE1D9461Da77595Bd", renegotiationId: String!): Renegotiation!
  showSaleOffer(saleOfferId: String!): SingleNFTOrder!
}

type NFT implements Node {
  activeLoan: Loan
  collection: Collection
  createdDate: DateTime!
  description: String
  id: String!
  image: Asset
  isFlagged: Boolean
  listed: Listing
  marketPlaceOfPrice: String
  name: String
  nftId: String!
  owner: Address
  price: BigInt
  priceCurrencyAddress: String
  rarityRank: Int
  rarityScore: Float
  statistics: NftStatistics!
  tokenId: BigInt!
  traits: [Trait!]!
  url: String
  wrapsNfts: [NFT!]
}

type NFTConnection {
  edges: [NFTEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NFTEdge {
  cursor: String!
  node: NFT!
}

type NewOfferNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  notificationType: String!
  offer: Offer!
  readOn: DateTime
  user: User!
}

type NewRenegotiationOfferNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  notificationType: String!
  readOn: DateTime
  renegotiation: Renegotiation!
  user: User!
}

enum NftSortField {
  COLLECTION
  NAME
  OFFERS_COUNT
  STATUS
}

input NftSortInput {
  field: NftSortField!
  order: Ordering!
  principalAddress: Address = null
}

type NftStatistics {
  bestOffer: CurrencyAmount
  floorPrice: CurrencyAmount
  floorPrice7d: Float
  floorPrice30d: Float
  lastSale: Sale
  loansTotalVolume(currencyAddress: Address!): BigInt!
  numberOfOffers(currencyAddress: Address!): Float!
  topTraitFloorPrice: CurrencyAmount
  totalVolume: Float
  totalVolume1d: Float
  totalVolume1m: Float
  totalVolume1w: Float
  totalVolume1y: Float
  totalVolume2m: Float
  totalVolume3m: Float
  totalVolume4m: Float
}

interface Node {
  id: String!
}

interface Notification implements Node {
  createdOn: DateTime!
  id: String!
  notificationType: String!
  readOn: DateTime
  user: User!
}

type NotificationConnection {
  edges: [NotificationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type NotificationEdge {
  cursor: String!
  node: Notification!
}

enum NotificationType {
  AUCTION_WON_NOTIFICATION
  LOAN_DEFAULTED_NOTIFICATION
  LOAN_DEFAULT_REMINDER_NOTIFICATION
  LOAN_REPAID_NOTIFICATION
  LOST_SOURCE_NOTIFICATION
  NEW_OFFER_NOTIFICATION
  NEW_RENEGOTIATION_OFFER_NOTIFICATION
  OFFER_ACCEPTED_NOTIFICATION
  OUTBID_NOTIFICATION
  SET_NFT_NOTIFICATION
}

interface Offer implements Node {
  aprBps: BigInt!
  borrowerAddress: Address
  capacity: BigInt!
  consumedCapacity: BigInt!
  contractAddress: Address!
  createdDate: DateTime
  currency: Currency
  duration: BigInt!
  expirationTime: BigInt!
  fee: BigInt!
  hidden: Boolean
  id: String!
  lenderAddress: Address
  maxPrincipal: BigInt!
  maxTrancheFloor: BigInt!
  netPrincipal: BigInt!
  offerHash: Hash
  offerId: BigInt!
  principalAddress: Address!
  principalAmount: BigInt!
  repayment: BigInt!
  requiresLiquidation: Boolean
  signature: Signature
  signerAddress: Address
  status: String!
  validators: [OfferValidator!]!
}

type OfferAcceptedNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  notificationType: String!
  offer: Offer!
  readOn: DateTime
  user: User!
}

type OfferConnection {
  edges: [OfferEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type OfferEdge {
  cursor: String!
  node: Offer!
}

type OfferStatistics {
  consumedCapacity: BigInt!
}

enum OfferStatus {
  ACTIVE
  CANCELLED
  EXECUTED
  EXPIRED
  INACTIVE
  OUTPERFORMED
}

type OfferValidator implements Node {
  arguments: Hex!
  id: String!
  offerId: String!
  validator: Address!
}

input OfferValidatorInput {
  arguments: Hex!
  validator: Address!
}

enum OffersSortField {
  APR_BPS
  CREATED_DATE
  DAILY_INTEREST
  DURATION
  EXPIRATION
  MAX_PRINCIPAL
  NET_INTEREST
  NET_PRINCIPAL
  PRINCIPAL_AMOUNT
  REPAYMENT
  STATUS
  TOTAL_INTEREST
}

input OffersSortInput {
  durationOfInterest: Int = null
  field: OffersSortField!
  order: Ordering!
}

interface Order implements Activity & Node {
  createdDate: DateTime!
  currency: Currency!
  currencyAddress: Address!
  expiration: DateTime
  fees: BigInt!
  hidden: Boolean!
  id: String!
  isAsk: Boolean!
  maker: Address!
  marketPlace: String!
  netAmount: BigInt!
  nonce: BigInt!
  orderType: String!
  price: BigInt!
  signature: Hash!
  startTime: DateTime!
  status: String!
  timestamp: DateTime!
  txHash: Hash
}

type OrderConnection {
  edges: [OrderEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type OrderEdge {
  cursor: String!
  node: Order!
}

enum Ordering {
  ASC
  DESC
}

type OutbidNotification implements Node & Notification {
  auction: Auction!
  createdOn: DateTime!
  id: String!
  loan: MultiSourceLoan!
  newBid: Bid!
  notificationType: String!
  readOn: DateTime
  user: User!
  userBid: Bid!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type PointActivity implements Node {
  id: String!
  loanActivity: LoanActivity!
  points: BigInt!
  reason: String!
  timestamp: DateTime!
  userId: Int!
}

type PointActivityConnection {
  edges: [PointActivityEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type PointActivityEdge {
  cursor: String!
  node: PointActivity!
}

type Query {
  getCollectionBySlug(slug: String!): Collection
  getCollectionsByContractAddress(contractAddress: Address!): [Collection!]!
  getListingById(listingId: Int!): Listing
  getLoanById(address: String!, loanId: Int!): Loan
  getNftByContractAddressAndTokenId(contractAddress: Address!, tokenId: BigInt!): NFT
  getNftBySlugAndTokenId(slug: String!, tokenId: BigInt!): NFT
  getPointsFromReferrals: Int!
  getReferredWallets: Int!
  getUserPointActivities(after: String, first: Int = 10): PointActivityConnection!
  getUserPoints: Int!
  listAuctions(after: String, currencyAddress: Address = null, first: Int = 10, sortBy: [AuctionSortInput!] = null, statuses: [AuctionStatus!] = null): AuctionConnection!
  listBestBidsForNft(currencyAddress: String!, nftId: Int!): [Order!]!
  listBids(after: String, auctionId: String = null, bidders: [String!] = null, currencyAddress: Address = null, first: Int = 10, onlyLatest: Boolean! = false, sortBy: [BidSortInput!] = null): BidConnection!
  listCollections(after: String, collections: [Int!] = null, first: Int = 10, searchTerm: String = null, sortBy: [CollectionSortInput!] = null): CollectionConnection!
  listCollectionsWithListings(after: String, collections: [Int!] = null, first: Int! = 10, searchTerm: String = null): CollectionConnection!
  listCollectionsWithLoans(after: String, collections: [Int!] = null, first: Int! = 10, searchTerm: String = null): CollectionConnection!
  listListings(after: String, collectionIds: [Int!] = null, currencyAddress: Address = null, first: Int = 10, marketplaceNames: [MarketplaceEnum!] = null, searchTerm: String = null, userFilter: UserFilter = null, withLoans: Boolean = false): ListingConnection!
  listLoanActivities(after: String, first: Int! = 10, loanId: String = null, sortBy: [LoanActivitySortInput!] = null, types: [LoanActivityType!] = null): LoanActivityConnection!
  listLoans(after: String, borrowerAddress: String = null, collections: [Int!] = null, contractAddresses: [Address!] = null, currencyAddress: Address = null, excludeOwn: Boolean = null, first: Int! = 10, hideLocked: Boolean = null, nfts: [Int!] = null, orderByStatuses: Boolean = true, sortBy: [LoanSortInput!] = null, statuses: [LoanStatusType!] = null, terms: TermsFilter = null): MultiSourceLoanConnection!
  listNftDelegations(after: String, contractAddress: Address = null, first: Int! = 20, nftId: Int!): DelegationConnection!
  listNftOffersAndRenegotiations(after: String, collections: [Int!] = null, currencyAddress: Address = null, first: Int = null, hidden: Boolean = null, lenders: [String!] = null, sortBy: OffersSortInput = null, statuses: [OfferStatus!] = null, terms: TermsFilter = null): SingleNFTOfferRenegotiationConnection!
  listNftsFromCollections(after: String, collections: [Int!]!, first: Int = 10, onlyListed: Boolean = null, searchTerm: String = null, traitRanges: [TraitRangeOptionsInput!] = null, traits: [TraitKeyValueOptionsInput!] = null): NFTConnection!
  listNftsFromUser(after: String, first: Int = 10, searchTerm: String = null, sortBy: [NftSortInput!] = null, withLoans: Boolean = false, withNoWraps: Boolean = false): NFTConnection!
  listNotifications(after: String, first: Int = 50, notificationTypes: [NotificationType!] = null, onlyRead: Boolean! = false, onlyUnread: Boolean! = false): NotificationConnection!
  listOffers(after: String, borrowerAddress: String = null, collections: [Int!] = null, contractAddress: Address = null, currencyAddress: Address = null, first: Int = 10, hidden: Boolean = null, lenders: [String!] = null, nfts: [Int!] = null, onlyCollectionOffers: Boolean = false, onlySingleNftOffers: Boolean = false, sortBy: [OffersSortInput!] = null, statuses: [OfferStatus!] = null, terms: TermsFilter = null, worseOffers: Boolean = true): OfferConnection!
  listRenegotiations(after: String, collections: [Int!] = null, first: Int = 10, hidden: Boolean = null, loanId: String = null, sortBy: [OffersSortInput!] = null, statuses: [OfferStatus!] = null, terms: RefinanceTermsFilter = null): RenegotiationConnection!
  listSaleOffers(after: String, bidder: [String!] = null, first: Int = 10): OrderConnection!
  listSources(after: String, currencyAddress: Address = null, first: Int! = 10, includeLost: Boolean = null, lenders: [String!] = null, sortBy: [SourceSortInput!] = null, statuses: [LoanStatusType!] = null, terms: TermsFilter = null): SourceLostSourceConnection!
  listUserSaleOffers(after: String, first: Int = 10): OrderConnection!
  me: User
}

input RangeInput {
  max: Int!
  min: Int!
}

input RefinanceTermsFilter {
  aprBps: Interval = null
  duration: Interval = null
  fee: Interval = null
  maxPrincipal: Interval = null
  netPrincipal: Interval = null
  principal: Interval = null
  remainingTime: Interval = null
}

type Renegotiation implements Node {
  aprBps: BigInt!
  createdDate: DateTime
  duration: BigInt!
  expirationTime: BigInt!
  feeAmount: BigInt!
  hidden: Boolean
  id: String!
  lenderAddress: Address
  loan: Loan!
  loanAddress: Address!
  loanId: BigInt!
  loanReferenceId: String!
  nft: NFT!
  offerHash: Hash
  principalAmount: BigInt!
  renegotiationId: BigInt!
  repayment: BigInt!
  requiresLiquidation: Boolean!
  signature: Signature
  signerAddress: Address
  status: String!
  strictImprovement: Boolean!
}

type RenegotiationConnection {
  edges: [RenegotiationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type RenegotiationEdge {
  cursor: String!
  node: Renegotiation!
}

input RenegotiationOfferInput {
  aprBps: BigInt!
  duration: BigInt!
  expirationTime: BigInt!
  feeAmount: BigInt!
  lenderAddress: Address!
  loanId: String!
  principalAmount: BigInt!
  requiresLiquidation: Boolean = null
  signerAddress: Address = null
  strictImprovement: Boolean = null
  targetPrincipal: [BigInt!] = null
  trancheIndex: [BigInt!] = null
}

type RenegotiationRequest implements Node {
  desiredAprBps: BigInt!
  desiredDuration: BigInt!
  desiredPrincipalAmount: BigInt!
  id: String!
  loanId: String!
}

type RenegotiationRequestedNotification implements Node & Notification {
  aprBps: BigInt!
  createdOn: DateTime!
  duration: BigInt!
  id: String!
  loan: MultiSourceLoan!
  loanId: String!
  notificationType: String!
  principalAmount: BigInt!
  readOn: DateTime
  user: User!
}

type Royalty {
  beneficiary: String!
  percentage: Float!
}

type Sale implements Activity & Node {
  id: String!
  nft: NFT!
  order: Order!
  taker: String!
  timestamp: DateTime!
  txHash: Hash
}

input SaleOfferInput {
  endAmount: BigInt!
  identifierOrCriteria: BigInt!
  itemType: Int!
  startAmount: BigInt!
  token: Address!
}

scalar Signature

input SignedOrderInput {
  conduitKey: Hash!
  consideration: [ConsiderationInput!]!
  counter: BigInt!
  endTime: BigInt!
  offer: [SaleOfferInput!]!
  offerer: Address!
  orderType: Int!
  salt: BigInt!
  signature: Signature!
  startTime: BigInt!
  zone: Address!
  zoneHash: Hash!
}

input SignedRenegotiationOfferInput {
  aprBps: BigInt!
  duration: BigInt!
  expirationTime: BigInt!
  feeAmount: BigInt!
  lenderAddress: Address!
  loanId: String!
  offerHash: Hash!
  principalAmount: BigInt!
  renegotiationId: BigInt!
  requiresLiquidation: Boolean = null
  signature: Signature!
  signerAddress: Address = null
  strictImprovement: Boolean = null
  targetPrincipal: [BigInt!] = null
  trancheIndex: [BigInt!] = null
}

type SingleNFTOffer implements Node & Offer {
  aprBps: BigInt!
  borrowerAddress: Address
  capacity: BigInt!
  consumedCapacity: BigInt!
  contractAddress: Address!
  createdDate: DateTime
  currency: Currency
  duration: BigInt!
  expirationTime: BigInt!
  fee: BigInt!
  hidden: Boolean
  id: String!
  lenderAddress: Address
  maxPrincipal: BigInt!
  maxTrancheFloor: BigInt!
  netPrincipal: BigInt!
  nft: NFT!
  offerHash: Hash
  offerId: BigInt!
  principalAddress: Address!
  principalAmount: BigInt!
  repayment: BigInt!
  requiresLiquidation: Boolean
  signature: Signature
  signerAddress: Address
  statistics: OfferStatistics!
  status: String!
  validators: [OfferValidator!]!
}

input SingleNFTOfferInput {
  aprBps: BigInt!
  borrowerAddress: Address!
  capacity: BigInt!
  contractAddress: Address!
  duration: BigInt!
  expirationTime: BigInt!
  fee: BigInt!
  lenderAddress: Address!
  maxTrancheFloor: BigInt = null
  nftId: Int!
  offerValidators: [OfferValidatorInput!]!
  principalAddress: Address!
  principalAmount: BigInt!
  requiresLiquidation: Boolean = null
  signerAddress: Address = null
}

union SingleNFTOfferRenegotiation = Renegotiation | SingleNFTOffer

type SingleNFTOfferRenegotiationConnection {
  edges: [SingleNFTOfferRenegotiationEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SingleNFTOfferRenegotiationEdge {
  cursor: String!
  node: SingleNFTOfferRenegotiation!
}

type SingleNFTOrder implements Activity & Node & Order {
  createdDate: DateTime!
  currency: Currency!
  currencyAddress: Address!
  expiration: DateTime
  fees: BigInt!
  hidden: Boolean!
  id: String!
  isAsk: Boolean!
  maker: Address!
  marketPlace: String!
  netAmount: BigInt!
  nft: NFT!
  nonce: BigInt!
  orderType: String!
  price: BigInt!
  signature: Hash!
  startTime: DateTime!
  status: String!
  timestamp: DateTime!
  txHash: Hash
}

input SingleNFTSignedOfferInput {
  aprBps: BigInt!
  borrowerAddress: Address!
  capacity: BigInt!
  contractAddress: Address!
  duration: BigInt!
  expirationTime: BigInt!
  fee: BigInt!
  lenderAddress: Address!
  maxTrancheFloor: BigInt = null
  nftId: Int!
  offerHash: Hash!
  offerId: BigInt!
  offerValidators: [OfferValidatorInput!]!
  principalAddress: Address!
  principalAmount: BigInt!
  requiresLiquidation: Boolean = null
  signature: Signature!
  signerAddress: Address = null
}

type Source implements Node {
  accruedInterest: BigInt!
  aprBps: BigInt!
  id: String!
  lenderAddress: String!
  loan: MultiSourceLoan!
  loanId: String!
  loanIndex: Int
  loanReferenceId: String!
  originationFee: BigInt!
  principalAmount: BigInt!
  seniorPrincipalAmount: BigInt
  startTime: DateTime!
}

type SourceHistory implements Node {
  accruedInterest: BigInt!
  aprBps: BigInt!
  id: String!
  lenderAddress: String!
  loanId: String!
  loanIndex: Int
  originationFee: BigInt!
  principalAmount: BigInt!
  seniorPrincipalAmount: BigInt
  startTime: DateTime!
}

union SourceLostSource = LostSource | Source

type SourceLostSourceConnection {
  edges: [SourceLostSourceEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SourceLostSourceEdge {
  cursor: String!
  node: SourceLostSource!
}

enum SourceSortField {
  ACCRUED_INTEREST
  APR_BPS
  DUE_DATE
  DURATION
  EARNED_INTEREST
  ORIGINATION_FEE
  PRINCIPAL_AMOUNT
  START_TIME
}

input SourceSortInput {
  field: SourceSortField!
  order: Ordering!
}

type StatByCollection {
  collection: Collection!
  value: BigInt!
}

input TermsFilter {
  aprBps: Interval = null
  duration: Interval = null
  fee: Interval = null
  maxPrincipal: Interval = null
  netPrincipal: Interval = null
  principal: Interval = null
}

type Trait {
  collectionId: String!
  statistics: CollectionStatistics!
  type: String!
  value: String!
}

input TraitKeyValueOptionsInput {
  key: String!
  values: [String!]!
}

input TraitRangeOptionsInput {
  key: String!
  range: RangeInput!
}

type UnderfundedOfferNotification implements Node & Notification {
  createdOn: DateTime!
  id: String!
  notificationType: String!
  offer: Offer!
  readOn: DateTime
  user: User!
}

type User implements Node {
  about: String
  beta: Boolean!
  blockchain: String!
  cart: Cart!
  cartId: Int
  createdDate: DateTime!
  id: String!
  linkedWallets: [LinkedWallets!]!
  mail: String
  mailValidationDate: DateTime
  originalProfilePicture: String
  profilePictureId: Int
  size64ProfilePicture: String
  size128ProfilePicture: String
  size256ProfilePicture: String
  size512ProfilePicture: String
  statistics: UserStatistics!
  twitterHandle: String
  updatedAt: DateTime
  usedProduct: Boolean!
  username: String
  walletAddress: Address!
}

input UserFilter {
  onlyOrExclude: Boolean!
  userId: Int!
}

type UserStatistics {
  defaultedPrincipal(currencyAddress: Address!, walletsAddresses: [Address!]!): BigInt!
  interestEarnedByCollection(currencyAddress: Address!, walletsAddresses: [Address!]!): [StatByCollection!]!
  loanCount(currencyAddress: Address!, walletsAddresses: [Address!]!): BigInt!
  loanCountByCollection(currencyAddress: Address!, walletsAddresses: [Address!]!): [StatByCollection!]!
  loanPrincipalByCollection(currencyAddress: Address!, walletsAddresses: [Address!]!): [StatByCollection!]!
  originationCountAndPrincipalByMonth(currencyAddress: Address!, walletsAddresses: [Address!]!): [[BigInt!]!]!
  outstandingPrincipal(currencyAddress: Address!, walletsAddresses: [Address!]!): BigInt!
  renegotiationCountAndPrincipalByMonth(currencyAddress: Address!, walletsAddresses: [Address!]!): [[BigInt!]!]!
  totalLentPrincipal(currencyAddress: Address!, walletsAddresses: [Address!]!): BigInt!
  wavgActualAprByCollection(currencyAddress: Address!, walletsAddresses: [Address!]!): [StatByCollection!]!
  wavgExpectedAprByCollection(currencyAddress: Address!, walletsAddresses: [Address!]!): [StatByCollection!]!
  wavgOutstandingApr(currencyAddress: Address!, walletsAddresses: [Address!]!): BigInt!
  wavgRepaidApr(currencyAddress: Address!, walletsAddresses: [Address!]!): BigInt!
}

"""Represents NULL values"""
scalar Void